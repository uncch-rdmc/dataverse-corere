# Generated by Django 3.1.8 on 2021-04-14 21:13

import autoslug.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, help_text="Designates whether the user can log into this admin site.", verbose_name="staff status"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("invite_key", models.CharField(blank=True, max_length=64)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                ("invited_by", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="GitFile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                (
                    "md5",
                    models.CharField(
                        help_text="Generated cryptographic hash of the file contents. Used to tell if a file has changed between versions.",
                        max_length=32,
                        verbose_name="md5",
                    ),
                ),
                (
                    "path",
                    models.CharField(
                        help_text="The path of the folders holding the file, not including the filename", max_length=4096, verbose_name="file path"
                    ),
                ),
                ("name", models.CharField(help_text="The name of the file", max_length=4096, verbose_name="file name")),
                ("date", models.DateTimeField(verbose_name="file creation date")),
                ("size", models.IntegerField(help_text="The size of the file in bytes", verbose_name="file size")),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("code", "Code"),
                            ("data", "Data"),
                            ("doc_readme", "Documentation - Readme"),
                            ("doc_codebook", "Documentation - Codebook"),
                            ("doc_other", "Documentation - Other"),
                        ],
                        max_length=14,
                        verbose_name="file type",
                    ),
                ),
                ("description", models.CharField(default="", max_length=1024, verbose_name="file description")),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_gitfiles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_gitfiles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Manuscript",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                ("title", models.CharField(default="", help_text="Title of the manuscript", max_length=200, verbose_name="Manuscript Title")),
                (
                    "pub_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        help_text="The internal ID from the publication",
                        max_length=200,
                        null=True,
                        verbose_name="Publication ID",
                    ),
                ),
                (
                    "qual_analysis",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Whether this manuscript needs qualitative analysis",
                        null=True,
                        verbose_name="Qualitative Analysis",
                    ),
                ),
                (
                    "qdr_review",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Was this manuscript reviewed by the Qualitative Data Repository?",
                        null=True,
                        verbose_name="QDR Review",
                    ),
                ),
                (
                    "contact_first_name",
                    models.CharField(
                        blank=True,
                        help_text="First name of the publication contact that will be stored in Dataverse",
                        max_length=150,
                        verbose_name="Contact First Name",
                    ),
                ),
                (
                    "contact_last_name",
                    models.CharField(
                        blank=True,
                        help_text="Last name of the publication contact that will be stored in Dataverse",
                        max_length=150,
                        verbose_name="Contact Last Name",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address of the publication contact that will be stored in Dataverse",
                        max_length=254,
                        null=True,
                        verbose_name="Contact Email Address",
                    ),
                ),
                (
                    "dataverse_doi",
                    models.CharField(blank=True, help_text="DOI of the publication in Dataverse", max_length=150, verbose_name="Dataverse DOI"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Additional info about the manuscript",
                        max_length=1024,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("agricultural", "Agricultural Sciences"),
                            ("arts", "Arts and Humanities"),
                            ("astronomy", "Astronomy and Astrophysics"),
                            ("business", "Business and Management"),
                            ("chemistry", "Chemistry"),
                            ("computer", "Computer and Information Science"),
                            ("environmental", "Earth and Environmental Sciences"),
                            ("engineering", "Engineering"),
                            ("law", "Law"),
                            ("mathematics", "Mathematical Sciences"),
                            ("health", "Medicine, Health and Life Sciences"),
                            ("physics", "Physics"),
                            ("social", "Social Sciences"),
                            ("other", "Other"),
                        ],
                        max_length=14,
                        null=True,
                        verbose_name="Subject",
                    ),
                ),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("awaiting_init", "Awaiting Initial Submission"),
                            ("awaiting_resub", "Awaiting Resubmission"),
                            ("reviewing", "Reviewing Submission"),
                            ("processing", "Processing Submission"),
                            ("completed", "Completed"),
                        ],
                        default="new",
                        help_text="The overall status of the manuscript in the review process",
                        max_length=15,
                        verbose_name="Manuscript Status",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("slug", autoslug.fields.AutoSlugField(editable=False, populate_from="title")),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_manuscripts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_manuscripts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
            ],
            options={
                "permissions": [
                    ("add_authors_on_manuscript", "Can manage authors on manuscript"),
                    ("remove_authors_on_manuscript", "Can manage authors on manuscript"),
                    ("manage_editors_on_manuscript", "Can manage editors on manuscript"),
                    ("manage_curators_on_manuscript", "Can manage curators on manuscript"),
                    ("manage_verifiers_on_manuscript", "Can manage verifiers on manuscript"),
                    ("add_submission_to_manuscript", "Can add submission to manuscript"),
                    ("approve_manuscript", "Can review submissions for processing"),
                    ("curate_manuscript", "Can curate manuscript/submission"),
                    ("verify_manuscript", "Can verify manuscript/submission"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("in_progress_edition", "In Progress Edition"),
                            ("in_progress_curation", "In Progress Curation"),
                            ("in_progress_verification", "In Progress Verification"),
                            ("reviewed_awaiting_report", "Reviewed Awaiting Report"),
                            ("reviewed_awaiting_approve", "Reviewed Report Awaiting Approval"),
                            ("returned", "Returned"),
                        ],
                        default="new",
                        help_text="The status of the submission in the review process",
                        max_length=25,
                        verbose_name="Submission review status",
                    ),
                ),
                ("version_id", models.IntegerField(verbose_name="Version number")),
                (
                    "high_performance",
                    models.BooleanField(default=False, verbose_name="Does this submission require a high-performance compute environment?"),
                ),
                ("contents_gis", models.BooleanField(default=False, verbose_name="Does this submission contain GIS data and mapping?")),
                (
                    "contents_proprietary",
                    models.BooleanField(default=False, verbose_name="Does this submission contain restricted or proprietary data?"),
                ),
                (
                    "contents_proprietary_sharing",
                    models.BooleanField(default=False, verbose_name="Are you restricted from sharing this data with Odum for verification only?"),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_submissions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_submissions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_submissions", to="main.manuscript"),
                ),
            ],
            options={
                "ordering": ["version_id"],
                "default_permissions": (),
                "unique_together": {("manuscript", "version_id")},
            },
        ),
        migrations.CreateModel(
            name="VerificationMetadata",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                ("operating_system", models.CharField(default="", max_length=200, verbose_name="Operating System")),
                ("machine_type", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Machine Type")),
                ("scheduler", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Scheduler Module")),
                ("platform", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Platform")),
                ("processor_reqs", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Processor Requirements")),
                ("host_url", models.URLField(blank=True, default="", null=True, verbose_name="Hosting Institution URL")),
                ("memory_reqs", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Memory Reqirements")),
                (
                    "packages_info",
                    models.TextField(
                        default="", help_text="Please provide the list of your packages and their versions.", verbose_name="Packages Info"
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_verificationmetadatas",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_verificationmetadatas",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "submission",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="submission_vmetadata", to="main.submission"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="VerificationMetadataSoftware",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Name")),
                ("version", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Version")),
                (
                    "verification_metadata",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="verificationmetadata_softwares", to="main.verificationmetadata"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VerificationMetadataBadge",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Name")),
                ("badge_type", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Type")),
                ("version", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Version")),
                ("definition_url", models.URLField(blank=True, default="", null=True, verbose_name="Definition URL")),
                ("logo_url", models.URLField(blank=True, default="", null=True, verbose_name="Logo URL")),
                ("issuing_org", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Issuing Organization")),
                ("issuing_date", models.DateField(blank=True, null=True, verbose_name="Issuing Date")),
                (
                    "verification_metadata",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="verificationmetadata_badges", to="main.verificationmetadata"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VerificationMetadataAudit",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Name")),
                ("version", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Version")),
                ("url", models.URLField(blank=True, default="", null=True, verbose_name="URL")),
                ("organization", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Organization")),
                ("verified_results", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Verified Results")),
                ("exceptions", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Exceptions")),
                ("exception_reason", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Exception Reason")),
                (
                    "verification_metadata",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="verificationmetadata_audits", to="main.verificationmetadata"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Verification",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("not_attempted", "Not Attempted"),
                            ("minor_issues", "Minor Issues"),
                            ("major_issues", "Major Issues"),
                            ("success_w_mod", "Success W Mod"),
                            ("success", "Success"),
                        ],
                        default="new",
                        help_text="Was the submission able to be verified",
                        max_length=15,
                        verbose_name="Verification Status",
                    ),
                ),
                ("report", models.TextField(default="", verbose_name="Report")),
                ("code_executability", models.CharField(default="", max_length=2000, verbose_name="Code Executability")),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_verifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_verifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_verification", to="main.manuscript"),
                ),
                (
                    "submission",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="submission_verification", to="main.submission"),
                ),
            ],
            options={
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                ("text", models.TextField(blank=True, default="", verbose_name="Note Text")),
                (
                    "ref_file_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("code", "Code"),
                            ("data", "Data"),
                            ("doc_readme", "Documentation - Readme"),
                            ("doc_codebook", "Documentation - Codebook"),
                            ("doc_other", "Documentation - Other"),
                        ],
                        max_length=14,
                        verbose_name="file type",
                    ),
                ),
                (
                    "ref_cycle",
                    models.CharField(
                        choices=[("submission", "Submission"), ("edition", "Edition"), ("curation", "Curation"), ("verification", "Verification")],
                        max_length=12,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_notes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_notes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                ("manuscript", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="main.manuscript")),
                (
                    "note_replied_to",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="note_responses", to="main.note"
                    ),
                ),
                (
                    "parent_submission",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="notes", to="main.submission"),
                ),
                (
                    "ref_file",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="ref_notes", to="main.gitfile"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Keyword",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.CharField(default="", max_length=200, verbose_name="Keyword")),
                (
                    "manuscript",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_keywords", to="main.manuscript"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalVerificationMetadataSoftware",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("history_change_list", models.TextField(default="")),
                ("name", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Name")),
                ("version", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Version")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "verification_metadata",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.verificationmetadata",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical verification metadata software",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalVerificationMetadataBadge",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("history_change_list", models.TextField(default="")),
                ("name", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Name")),
                ("badge_type", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Type")),
                ("version", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Version")),
                ("definition_url", models.URLField(blank=True, default="", null=True, verbose_name="Definition URL")),
                ("logo_url", models.URLField(blank=True, default="", null=True, verbose_name="Logo URL")),
                ("issuing_org", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Issuing Organization")),
                ("issuing_date", models.DateField(blank=True, null=True, verbose_name="Issuing Date")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "verification_metadata",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.verificationmetadata",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical verification metadata badge",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalVerificationMetadataAudit",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("history_change_list", models.TextField(default="")),
                ("name", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Name")),
                ("version", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Version")),
                ("url", models.URLField(blank=True, default="", null=True, verbose_name="URL")),
                ("organization", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Organization")),
                ("verified_results", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Verified Results")),
                ("exceptions", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Exceptions")),
                ("exception_reason", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Exception Reason")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "verification_metadata",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.verificationmetadata",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical verification metadata audit",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalVerificationMetadata",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was last updated", verbose_name="updated at")),
                ("history_change_list", models.TextField(default="")),
                ("operating_system", models.CharField(default="", max_length=200, verbose_name="Operating System")),
                ("machine_type", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Machine Type")),
                ("scheduler", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Scheduler Module")),
                ("platform", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Platform")),
                ("processor_reqs", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Processor Requirements")),
                ("host_url", models.URLField(blank=True, default="", null=True, verbose_name="Hosting Institution URL")),
                ("memory_reqs", models.CharField(blank=True, default="", max_length=200, null=True, verbose_name="Memory Reqirements")),
                (
                    "packages_info",
                    models.TextField(
                        default="", help_text="Please provide the list of your packages and their versions.", verbose_name="Packages Info"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical verification metadata",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalVerification",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was last updated", verbose_name="updated at")),
                ("history_change_list", models.TextField(default="")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("not_attempted", "Not Attempted"),
                            ("minor_issues", "Minor Issues"),
                            ("major_issues", "Major Issues"),
                            ("success_w_mod", "Success W Mod"),
                            ("success", "Success"),
                        ],
                        default="new",
                        help_text="Was the submission able to be verified",
                        max_length=15,
                        verbose_name="Verification Status",
                    ),
                ),
                ("report", models.TextField(default="", verbose_name="Report")),
                ("code_executability", models.CharField(default="", max_length=2000, verbose_name="Code Executability")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.manuscript",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical verification",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalUser",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        db_index=True,
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, help_text="Designates whether the user can log into this admin site.", verbose_name="staff status"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("history_change_list", models.TextField(default="")),
                ("invite_key", models.CharField(blank=True, max_length=64)),
                ("email", models.EmailField(db_index=True, max_length=254)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "invited_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical user",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSubmission",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was last updated", verbose_name="updated at")),
                ("history_change_list", models.TextField(default="")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("in_progress_edition", "In Progress Edition"),
                            ("in_progress_curation", "In Progress Curation"),
                            ("in_progress_verification", "In Progress Verification"),
                            ("reviewed_awaiting_report", "Reviewed Awaiting Report"),
                            ("reviewed_awaiting_approve", "Reviewed Report Awaiting Approval"),
                            ("returned", "Returned"),
                        ],
                        default="new",
                        help_text="The status of the submission in the review process",
                        max_length=25,
                        verbose_name="Submission review status",
                    ),
                ),
                ("version_id", models.IntegerField(verbose_name="Version number")),
                (
                    "high_performance",
                    models.BooleanField(default=False, verbose_name="Does this submission require a high-performance compute environment?"),
                ),
                ("contents_gis", models.BooleanField(default=False, verbose_name="Does this submission contain GIS data and mapping?")),
                (
                    "contents_proprietary",
                    models.BooleanField(default=False, verbose_name="Does this submission contain restricted or proprietary data?"),
                ),
                (
                    "contents_proprietary_sharing",
                    models.BooleanField(default=False, verbose_name="Are you restricted from sharing this data with Odum for verification only?"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.manuscript",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical submission",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalNote",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was last updated", verbose_name="updated at")),
                ("history_change_list", models.TextField(default="")),
                ("text", models.TextField(blank=True, default="", verbose_name="Note Text")),
                (
                    "ref_file_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("code", "Code"),
                            ("data", "Data"),
                            ("doc_readme", "Documentation - Readme"),
                            ("doc_codebook", "Documentation - Codebook"),
                            ("doc_other", "Documentation - Other"),
                        ],
                        max_length=14,
                        verbose_name="file type",
                    ),
                ),
                (
                    "ref_cycle",
                    models.CharField(
                        choices=[("submission", "Submission"), ("edition", "Edition"), ("curation", "Curation"), ("verification", "Verification")],
                        max_length=12,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.manuscript",
                    ),
                ),
                (
                    "note_replied_to",
                    models.ForeignKey(
                        blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name="+", to="main.note"
                    ),
                ),
                (
                    "parent_submission",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.submission",
                    ),
                ),
                (
                    "ref_file",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.gitfile",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical note",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalManuscript",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was last updated", verbose_name="updated at")),
                ("history_change_list", models.TextField(default="")),
                ("title", models.CharField(default="", help_text="Title of the manuscript", max_length=200, verbose_name="Manuscript Title")),
                (
                    "pub_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        help_text="The internal ID from the publication",
                        max_length=200,
                        null=True,
                        verbose_name="Publication ID",
                    ),
                ),
                (
                    "qual_analysis",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Whether this manuscript needs qualitative analysis",
                        null=True,
                        verbose_name="Qualitative Analysis",
                    ),
                ),
                (
                    "qdr_review",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Was this manuscript reviewed by the Qualitative Data Repository?",
                        null=True,
                        verbose_name="QDR Review",
                    ),
                ),
                (
                    "contact_first_name",
                    models.CharField(
                        blank=True,
                        help_text="First name of the publication contact that will be stored in Dataverse",
                        max_length=150,
                        verbose_name="Contact First Name",
                    ),
                ),
                (
                    "contact_last_name",
                    models.CharField(
                        blank=True,
                        help_text="Last name of the publication contact that will be stored in Dataverse",
                        max_length=150,
                        verbose_name="Contact Last Name",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address of the publication contact that will be stored in Dataverse",
                        max_length=254,
                        null=True,
                        verbose_name="Contact Email Address",
                    ),
                ),
                (
                    "dataverse_doi",
                    models.CharField(blank=True, help_text="DOI of the publication in Dataverse", max_length=150, verbose_name="Dataverse DOI"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Additional info about the manuscript",
                        max_length=1024,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("agricultural", "Agricultural Sciences"),
                            ("arts", "Arts and Humanities"),
                            ("astronomy", "Astronomy and Astrophysics"),
                            ("business", "Business and Management"),
                            ("chemistry", "Chemistry"),
                            ("computer", "Computer and Information Science"),
                            ("environmental", "Earth and Environmental Sciences"),
                            ("engineering", "Engineering"),
                            ("law", "Law"),
                            ("mathematics", "Mathematical Sciences"),
                            ("health", "Medicine, Health and Life Sciences"),
                            ("physics", "Physics"),
                            ("social", "Social Sciences"),
                            ("other", "Other"),
                        ],
                        max_length=14,
                        null=True,
                        verbose_name="Subject",
                    ),
                ),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("awaiting_init", "Awaiting Initial Submission"),
                            ("awaiting_resub", "Awaiting Resubmission"),
                            ("reviewing", "Reviewing Submission"),
                            ("processing", "Processing Submission"),
                            ("completed", "Completed"),
                        ],
                        default="new",
                        help_text="The overall status of the manuscript in the review process",
                        max_length=15,
                        verbose_name="Manuscript Status",
                    ),
                ),
                ("uuid", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical manuscript",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalEdition",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was last updated", verbose_name="updated at")),
                ("history_change_list", models.TextField(default="")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[("new", "New"), ("issues", "Issues"), ("no_issues", "No Issues")],
                        default="new",
                        help_text="Was the submission approved by the editor",
                        max_length=15,
                        verbose_name="Editor Approval",
                    ),
                ),
                ("report", models.TextField(default="", verbose_name="Report")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.manuscript",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical edition",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCuration",
            fields=[
                ("id", models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("created_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(blank=True, editable=False, help_text="Date model was last updated", verbose_name="updated at")),
                ("history_change_list", models.TextField(default="")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("incom_materials", "Incomplete Materials"),
                            ("major_issues", "Major Issues"),
                            ("minor_issues", "Minor Issues"),
                            ("no_issues", "No Issues"),
                        ],
                        default="new",
                        help_text="Was the submission approved by the curator",
                        max_length=15,
                        verbose_name="Curation Status",
                    ),
                ),
                ("report", models.TextField(default="", verbose_name="Report")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                ("history_type", models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.manuscript",
                    ),
                ),
                (
                    "submission",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="main.submission",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical curation",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="gitfile",
            name="parent_manuscript",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_files", to="main.manuscript"
            ),
        ),
        migrations.AddField(
            model_name="gitfile",
            name="parent_submission",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="submission_files", to="main.submission"
            ),
        ),
        migrations.CreateModel(
            name="Edition",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[("new", "New"), ("issues", "Issues"), ("no_issues", "No Issues")],
                        default="new",
                        help_text="Was the submission approved by the editor",
                        max_length=15,
                        verbose_name="Editor Approval",
                    ),
                ),
                ("report", models.TextField(default="", verbose_name="Report")),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_editions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_editions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_edition", to="main.manuscript"),
                ),
                (
                    "submission",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="submission_edition", to="main.submission"),
                ),
            ],
            options={
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.CharField(default="", max_length=200, verbose_name="Data Source")),
                (
                    "manuscript",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_data_sources", to="main.manuscript"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Curation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True, help_text="Date model was created", verbose_name="created at")),
                ("updated_at", models.DateTimeField(auto_now=True, help_text="Date model was last updated", verbose_name="updated at")),
                (
                    "_status",
                    django_fsm.FSMField(
                        choices=[
                            ("new", "New"),
                            ("incom_materials", "Incomplete Materials"),
                            ("major_issues", "Major Issues"),
                            ("minor_issues", "Minor Issues"),
                            ("no_issues", "No Issues"),
                        ],
                        default="new",
                        help_text="Was the submission approved by the curator",
                        max_length=15,
                        verbose_name="Curation Status",
                    ),
                ),
                ("report", models.TextField(default="", verbose_name="Report")),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="creator_curations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator User",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_editor_curations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Updating User",
                    ),
                ),
                (
                    "manuscript",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_curation", to="main.manuscript"),
                ),
                (
                    "submission",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="submission_curation", to="main.submission"),
                ),
            ],
            options={
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="ContainerInfo",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("repo_image_name", models.CharField(blank=True, max_length=128, null=True)),
                ("proxy_image_name", models.CharField(blank=True, max_length=128, null=True)),
                ("repo_container_id", models.CharField(blank=True, max_length=64, null=True)),
                ("repo_container_ip", models.CharField(blank=True, max_length=24, null=True)),
                ("proxy_container_id", models.CharField(blank=True, max_length=64, null=True)),
                ("proxy_container_ip", models.CharField(blank=True, max_length=24, null=True)),
                ("proxy_container_port", models.CharField(blank=True, max_length=5, null=True, unique=True)),
                ("network_ip_substring", models.CharField(blank=True, max_length=12, null=True)),
                ("network_id", models.CharField(blank=True, max_length=64, null=True)),
                ("submission_version", models.IntegerField()),
                (
                    "manuscript",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_containerinfo", to="main.manuscript"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("first_name", models.CharField(max_length=150, verbose_name="First Name")),
                ("last_name", models.CharField(max_length=150, verbose_name="Last Name")),
                (
                    "identifier_scheme",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ORCID", "ORCID"),
                            ("ISNI", "ISNI"),
                            ("LCNA", "LCNA"),
                            ("VIAF", "VIAF"),
                            ("GND", "GND"),
                            ("DAI", "DAI"),
                            ("ResearcherID", "ResearcherID"),
                            ("ScopusID", "ScopusID"),
                        ],
                        max_length=14,
                        null=True,
                        verbose_name="Identifier Scheme",
                    ),
                ),
                ("identifier", models.CharField(blank=True, max_length=150, null=True, verbose_name="Identifier")),
                (
                    "manuscript",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="manuscript_authors", to="main.manuscript"),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="gitfile",
            index=models.Index(fields=["path", "name", "parent_submission"], name="main_gitfil_path_3f8907_idx"),
        ),
        migrations.AddConstraint(
            model_name="gitfile",
            constraint=models.UniqueConstraint(fields=("path", "name", "parent_submission"), name="GitFile submission and path"),
        ),
    ]
